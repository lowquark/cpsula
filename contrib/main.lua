
-- The request handler, returned by the main file (this file), will be called by cpsula upon receipt
-- of a Gemini request.
--
-- Arguments:
--
--     address : string  -  IRI authority (no userinfo)
--    resource : string  -  Remainder of IRI, including first '/'
-- fingerprint : string  -  (optional) Client certificate fingerprint (Hex SHA-1 digest)
--      expiry : integer -  (optional) Client certificate expiration time (POSIX timestamp)
--
-- The request URI (cpsula also accepts IRIs) will be validated prior to calling the request
-- handler, and is split into the address portion, '<host>:<port>', and resource portion,
-- '/<path>?<query>#<fragment>'. The parameters `fingerprint` and `expiry` will each be nil unless
-- the client provides a client certificate as part of the TLS handshake.
--
-- Return value:
--
-- If the request handler returns a string, it will be sent back to the client directly, and the
-- connection will be closed.
--
-- If the request handler returns a function, cpsula will call the returned function repeatedly for
-- response data (a string) until it returns nil. Each chunk returned will be sent to the client
-- incrementally, and the connection will be closed once nil is returned. This allows cpsula to
-- handle other client requests while streaming a large file, and is intended to be used with Lua's
-- `coroutine.wrap`.

local header_success = '20 text/gemini\r\n'

local demo_page = [[
# Cpsula Demo Page

This page has been generated by Lua!

]]

function basic_request_handler(address, resource, fingerprint, expiry)
  -- Print request info
  print(address, resource, fingerprint, expiry);
  -- Return demo page
  return header_success..demo_page
end

function streaming_request_handler(address, resource, fingerprint, expiry)
  -- Print request info
  print(address, resource, fingerprint, expiry);
  -- Return incremental response handler
  return coroutine.wrap(function()
    -- Page header
    coroutine.yield(header_success..demo_page..'Stream test:\n')
    -- Stream one line at a time
    for count=1,10 do
      coroutine.yield('count: '..tostring(count)..'\n')
    end
  end)
end

-- Use this request handler
return basic_request_handler

