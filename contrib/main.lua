
-- This file, main.lua, is executed once when the server is started. The server calls the value
-- returned by this file (the request handler) to deliver data in response to requests.
--
-- For each request, the request handler will be called in a new coroutine with the following
-- arguments:
--     address : string  - URI authority (no userinfo)
--    resource : string  - Remainder of URI, including first '/'. Nil if not present.
-- fingerprint : string  - (optional) Client certificate fingerprint (Hex SHA-1 digest)
--      expiry : integer - (optional) Client certificate expiration time (POSIX timestamp)
--
-- The request URI (cpsula also accepts IRIs) will be validated prior to calling the request
-- handler, and is split into the address portion: '<host>:<port>', and resource portion:
-- '/<path>?<query>#<fragment>'.
--
-- The parameters `fingerprint` and `expiry` will each be nil unless the client provides a
-- certificate as part of the TLS handshake.
--
-- If the request handler returns a string, it will be sent back to the client directly, and the
-- connection will be closed once the data has been sent. If nil is returned, the connection will be
-- closed immediately.
--
-- If the request handler yields (via coroutine.yield), the returned data will be sent back to the
-- client, and the coroutine will be resumed once the data has been sent. The server may handle
-- other requests in the meantime. If nil is passed to coroutine.yield(), the connection will be
-- closed immediately and the coroutine will not be resumed.

local header_success = '20 text/gemini\r\n'

local demo_page = [[
# Cpsula Demo Page

This page has been generated by Lua!

]]

function basic_request_handler(address, resource, fingerprint, expiry)
  -- Log request info
  print(address, resource, fingerprint, expiry);
  -- Generate page
  return header_success .. demo_page
end

function streaming_request_handler(address, resource, fingerprint, expiry)
  -- Print request info
  print(address, resource, fingerprint, expiry);
  -- Generate header
  coroutine.yield(header_success..demo_page..'## Stream test:\n')
  -- Stream one line at a time
  for count=1,10 do
    coroutine.yield('count: '..tostring(count)..'\n')
  end
  -- Generate footer
  coroutine.yield('\n## Footer')
end

-- Use this request handler
return nil

